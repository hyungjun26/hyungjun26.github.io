<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SpurDev Blog</title>
    <link>https://hyungjun26.github.io/posts/</link>
    <description>Recent content in Posts on SpurDev Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 29 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hyungjun26.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Collection</title>
      <link>https://hyungjun26.github.io/posts/java-collection/</link>
      <pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hyungjun26.github.io/posts/java-collection/</guid>
      <description>Java Collection 객체지향 언어인 Java에서는 수많은 객체를 생성하고 이동해야 하는 경우 객체들을 저장하고 관리하는 공간이 필요하게된다. 그래서 Collection API라는 클래스 집합을 제공하여 객체들을 효율적으로 저장, 검색, 삭제할 수 있도록 하였다.
Collection 인터페이스   Set
 객체 저장 시 순서 없이 저장하고, 데이터 중복을 허용하지 않는다. HashSet : 순서가 보장되지 않고 데이터 중복을 허용하지 않는다. TreeSet : SortedSet을 구현한 클래스로 객체를 정렬하여 저장한다.    List
 객체 저장 시에 인덱스를 가지고 순서대로 저장하며, 중복된 데이터도 새로운 인덱스를 부여하여 저장한다.</description>
    </item>
    
    <item>
      <title>Java 학습(1)</title>
      <link>https://hyungjun26.github.io/posts/java-basic-oop/</link>
      <pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hyungjun26.github.io/posts/java-basic-oop/</guid>
      <description>객체지향 객체지향 개념은 개발자에게 쉽게 커스터마이징 가능하도록 하고, 유지보수성, 확장성, 재사용성을 증가시켜준다. 또한 CBD 기반의 개발은 응용프로그램이 컴포넌트 기반으로 운영되도록 하여 재사용성과 교체성을 증가시켜 모든 개발자들에게 많은 기회를 부여하였다.
객체지향은 다음과 같은 특징을 가지고 있다.
 Abstraction(추상화): 현상에 존재하는 객체의 주요특징을 추출하는 과정 Encapsulation(캡슐화): 하나의 클래스안에 데이터와 기능을 담아 정의하고, 중요한 데이터나 복잡한 기능 등은 숨기고, 외부에서 사용에 필요한 기능만을 공개하는 것. Inheritance(상속): 객체 정의 시 기존에 존재하는 객체의 속성과 기능을 상속받아 정의하는 것.</description>
    </item>
    
  </channel>
</rss>
